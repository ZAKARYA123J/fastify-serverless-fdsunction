// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:LMVuBTI7lj8s@ep-curly-field-a5pimz8f.us-east-2.aws.neon.tech/neondb?sslmode=require"
}
enum Role {
  COCHE
  STAFF
  ADMIN
}
model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  role            Role
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  staff          Staff?
  coche          Coche?
  admin           Admin?
  notifications   Notification[]
  notificationReads NotificationRead[]
  
}
model Group {
  id         Int       @id @default(autoincrement())
  name       String
  minAge     Int
  maxAge     Int
  coche     Coche    @relation(fields: [cocheId], references: [id])
  cocheId   Int
  Players    Player[]  @relation("PlayerGroups")

  @@unique([minAge, maxAge]) // Ensure no overlapping age ranges
}

model Player {
  id            Int             @id @default(autoincrement())
  name          String
  age           Int 
  nationality   String?
  contactInfo   String
  position      String
  photo         String?
  medicalRecord MedicalRecord?
  group        Group           @relation("PlayerGroups", fields: [groupId], references: [id])
  groupId      Int
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  medicalRecords MedicalRecord[]
}
model Coche {
  id              Int           @id @default(autoincrement())
  name            String
  specialization  String
  availability    Boolean       @default(true)
  experience      Int           @default(0)
  contactInfo     String
  user            User          @relation(fields: [userId], references: [id])
  userId          Int           @unique
  groups          Group[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  reports   Report[]
}



model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  read      Boolean   @default(false)
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  readBy    NotificationRead[]
}

model NotificationRead {
  id             Int          @id @default(autoincrement())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  readAt         DateTime     @default(now())

  @@unique([notificationId, userId])
}

model MedicalRecord {
  id          Int       @id @default(autoincrement())
  Player     Player   @relation(fields: [PlayerId], references: [id])
  PlayerId   Int       @unique
  diagnosis   String
  treatment   String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  staff      Staff?   @relation(fields: [staffId], references: [id])
  staffId    Int?
}

model Report {
  id            Int      @id @default(autoincrement())
  details       String
  dateGenerated DateTime @default(now())
  admin         Admin    @relation(fields: [adminId], references: [id])
  adminId       Int
}






